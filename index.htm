<!DOCTYPE html>
<head>
	
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<title>Hello, world!</title>
	<!-- include three.js library -->
	<script src='https://maxramgraber.github.io/GQ2019/js/three.js'></script>
	<!-- include jsartookit -->
	<script src="https://maxramgraber.github.io/GQ2019/jsartoolkit5/artoolkit.min.js"></script>
	<script src="https://maxramgraber.github.io/GQ2019/jsartoolkit5/artoolkit.api.js"></script>
	<!-- include threex.artoolkit -->
	<script src="https://maxramgraber.github.io/GQ2019/threex/threex-artoolkitsource.js"></script>
	<script src="https://maxramgraber.github.io/GQ2019/threex/threex-artoolkitcontext.js"></script>
	<script src="https://maxramgraber.github.io/GQ2019/threex/threex-arbasecontrols.js"></script>
	<script src="https://maxramgraber.github.io/GQ2019/threex/threex-armarkercontrols.js"></script>
	<script src="https://maxramgraber.github.io/GQ2019/threex/threex-arsmoothedcontrols.js"></script>
	<script src="https://maxramgraber.github.io/GQ2019/play-on-window-click.js"></script>
</head>

<body style='margin : 0px; overflow: hidden; font-family: Monospace;'>
	
<video id="video1" autoplay loop="false" crossOrigin="anonymous" play-on-window-click style="display:none">
	<source src="https://maxramgraber.github.io/GQ2019/ms12.mp4">
</video>

<video id="video2"  autoplay loop="false" crossOrigin="anonymous" play-on-window-click style="display:none">
	<source src="https://maxramgraber.github.io/GQ2019/MPS_example_cropped.mp4">
</video>

		
<!-- 
  Example created by Lee Stemkoski: https://github.com/stemkoski
  Based on the AR.js library and examples created by Jerome Etienne: https://github.com/jeromeetienne/AR.js/
-->

<script>
var scene, camera, renderer, clock, deltaTime, totalTime;
var arToolkitSource, arToolkitContext, smoothedControls1, smoothedControls2;
var markerRoot1, markerRoot2;
var mesh1, mesh2;
var video1, video2;
initialize();
animate();
function initialize()
{
	scene = new THREE.Scene();
	let ambientLight = new THREE.AmbientLight( 0xcccccc, 0.5 );
	scene.add( ambientLight );
				
	camera = new THREE.Camera();
	scene.add(camera);
	renderer = new THREE.WebGLRenderer({
		antialias : true,
		alpha: true
	});
	renderer.setClearColor(new THREE.Color('lightgrey'), 0)
	renderer.setSize( 3600, 1800 );
	renderer.domElement.style.position = 'relative'
	renderer.domElement.style.top = '0px'
	renderer.domElement.style.left = '0px'
	document.body.appendChild( renderer.domElement );
	clock = new THREE.Clock();
	deltaTime = 0;
	totalTime = 0;
	
	////////////////////////////////////////////////////////////
	// setup arToolkitSource
	////////////////////////////////////////////////////////////
	arToolkitSource = new THREEx.ArToolkitSource({
		sourceType : 'webcam',
	});
	function onResize()
	{
		arToolkitSource.onResize()	
		arToolkitSource.copySizeTo(renderer.domElement)	
		if ( arToolkitContext.arController !== null )
		{
			arToolkitSource.copySizeTo(arToolkitContext.arController.canvas)	
		}	
	}
	arToolkitSource.init(function onReady(){
		onResize()
	});
	
	// handle resize event
	window.addEventListener('resize', function(){
		onResize()
	});
	
	////////////////////////////////////////////////////////////
	// setup arToolkitContext
	////////////////////////////////////////////////////////////	
	// create atToolkitContext
	arToolkitContext = new THREEx.ArToolkitContext({
		cameraParametersUrl: 'data/camera_para.dat',
		detectionMode: 'mono'
	});
	
	// copy projection matrix to camera when initialization complete
	arToolkitContext.init( function onCompleted(){
		camera.projectionMatrix.copy( arToolkitContext.getProjectionMatrix() );
	});
	////////////////////////////////////////////////////////////
	// setup markerRoots
	////////////////////////////////////////////////////////////
	// build markerControls
	markerRoot1 = new THREE.Group();
	scene.add(markerRoot1);
	let markerControls1 = new THREEx.ArMarkerControls(arToolkitContext, markerRoot1, {
		type: 'pattern', patternUrl: "data/marker_tri_spiral.patt", //hiro
	})
	// interpolates from last position to create smoother transitions when moving.
	// parameter lerp values near 0 are slow, near 1 are fast (instantaneous).
	let smoothedRoot1 = new THREE.Group();
	scene.add(smoothedRoot1);
	smoothedControls1 = new THREEx.ArSmoothedControls(smoothedRoot1, {
		lerpPosition: 0.4,
		lerpQuaternion: 0.1,
		lerpScale: 0.8,
		// minVisibleDelay: 1,
		// minUnvisibleDelay: 1,
	});
	let geometry1 = new THREE.PlaneBufferGeometry(4,2, 8,4);
	let video1 = document.getElementById( 'video1' );
	let texture1 = new THREE.VideoTexture( video1 );
	texture1.minFilter = THREE.LinearFilter;
	texture1.magFilter = THREE.LinearFilter;
	texture1.format = THREE.RGBFormat;
	let material1 = new THREE.MeshBasicMaterial( { map: texture1 } );
	
	mesh1 = new THREE.Mesh( geometry1, material1 );
	mesh1.rotation.x = -Math.PI/2;
	//mesh1.position.x = -2.3; // this wasnt here before, -Max-
	//mesh1.position.z = 2.3; // this wasnt here before, -Max-
	mesh1.position.x = -3.5; // this wasnt here before, -Max--2.5 before
	mesh1.position.z = -1.; // this wasnt here before, -Max--2.2
	mesh1.scale.x = 1.4; // this wasnt here before, -Max- 1.6
	mesh1.scale.y = 1.4; // this wasnt here before, -Max-
	mesh1.scale.z = 1.4; // this wasnt here before, -Max-
	
	//markerRoot1.add( mesh1 );
	smoothedRoot1.add( mesh1 );
	
	
	
	
	markerRoot2 = new THREE.Group();
	scene.add(markerRoot2);
	let markerControls2 = new THREEx.ArMarkerControls(arToolkitContext, markerRoot2, {
		type: 'pattern', patternUrl: "data/marker_quad_spiral.patt", //hiro
	})
	// interpolates from last position to create smoother transitions when moving.
	// parameter lerp values near 0 are slow, near 1 are fast (instantaneous).
	let smoothedRoot2 = new THREE.Group();
	scene.add(smoothedRoot2);
	smoothedControls2 = new THREEx.ArSmoothedControls(smoothedRoot2, {
		lerpPosition: 0.4,
		lerpQuaternion: 0.1,
		lerpScale: 0.8,
		// minVisibleDelay: 1,
		// minUnvisibleDelay: 1,
	});
	let geometry2 = new THREE.PlaneBufferGeometry(4,2, 8,4);
	let video2 = document.getElementById( 'video2' );
	let texture2 = new THREE.VideoTexture( video2 );
	texture2.minFilter = THREE.LinearFilter;
	texture2.magFilter = THREE.LinearFilter;
	texture2.format = THREE.RGBFormat;
	let material2 = new THREE.MeshBasicMaterial( { map: texture2 } );
	
	mesh2 = new THREE.Mesh( geometry2, material2 );
	mesh2.rotation.x = -Math.PI/2;
	mesh2.position.x = -2.3; // this wasnt here before, -Max-
	mesh2.scale.x = 0.8; // this wasnt here before, -Max-
	mesh2.scale.y = 0.8; // this wasnt here before, -Max-
	mesh2.scale.z = 0.8; // this wasnt here before, -Max-
	
	//markerRoot2.add( mesh2 );
	smoothedRoot2.add( mesh2 );
	
	
}
function update()
{
	// update artoolkit on every frame
	if ( arToolkitSource.ready !== false )
		arToolkitContext.update( arToolkitSource.domElement );
	
	// additional code for smoothed controls
	smoothedControls1.update(markerRoot1);
	smoothedControls2.update(markerRoot2);
}
function render()
{
	renderer.render( scene, camera );
}
function animate()
{
	//requestAnimationFrame(animate);
	//deltaTime = clock.getDelta();
	//totalTime += deltaTime;
	
	setTimeout( function() {
		requestAnimationFrame( animate );
		deltaTime = clock.getDelta();
		totalTime += deltaTime;
	}, 1000 / 30 );
	
	update();
	render();
}
</script>
</body>
</html>
